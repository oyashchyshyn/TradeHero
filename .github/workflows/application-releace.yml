name: Application release

on:
  push:
    branches: [ main ]

env:
  HOST_PROJECT_PATH: TradeHero/Src/TradeHero.Runner/
  PUBLISH_WIN_FILE_PATH: TradeHero/Src/TradeHero.Runner/publish/win-x86/trade_hero.exe
  PUBLISH_LINUX_FILE_PATH: TradeHero/Src/TradeHero.Runner/publish/linux-x64/trade_hero
  PUBLISH_OSX_FILE_PATH: TradeHero/Src/TradeHero.Runner/publish/osx-x64/trade_hero
  
  UPDATER_PROJECT_PATH: TradeHero/Src/TradeHero.Updater/
  PUBLISH_UPDATER_WIN_PATH: TradeHero/Src/TradeHero.Updater/publish/win-x86/updater.exe
  PUBLISH_UPDATER_LINUX_PATH: TradeHero/Src/TradeHero.Updater/publish/linux-x64/updater
  PUBLISH_UPDATER_OSX_PATH: TradeHero/Src/TradeHero.Updater/publish/osx-x64/updater

jobs:
  build-publish-dotnet:
    runs-on: windows-latest
    steps:
      - name: Checkout to git directory
        uses: actions/checkout@v3
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 7.0.x
      - name: Restore application dependencies
        working-directory: ${{ env.HOST_PROJECT_PATH }}
        run: dotnet restore
      - name: Build application
        working-directory: ${{ env.HOST_PROJECT_PATH }}
        run: dotnet build --configuration Release --no-restore
      - name: Publish application win-x86
        working-directory: ${{ env.HOST_PROJECT_PATH }}
        run: dotnet publish -r win-x64 --output ./publish/win-x86 --self-contained true -p:PublishTrimmed=false -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true
      - name: Publish application linux-x64
        working-directory: ${{ env.HOST_PROJECT_PATH }}
        run: dotnet publish -r linux-x64 --output ./publish/linux-x64 --self-contained true -p:PublishTrimmed=false -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true
      - name: Publish application osx-x64
        working-directory: ${{ env.HOST_PROJECT_PATH }}
        run: dotnet publish -r osx-x64 --output ./publish/osx-x64 --self-contained true -p:PublishTrimmed=false -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true
      - name: Restore updater dependencies
        working-directory: ${{ env.UPDATER_PROJECT_PATH }}
        run: dotnet restore
      - name: Build updater
        working-directory: ${{ env.UPDATER_PROJECT_PATH }}
        run: dotnet build --configuration Release --no-restore
      - name: Publish updater win-x86
        working-directory: ${{ env.UPDATER_PROJECT_PATH }}
        run: dotnet publish -r win-x64 --output ./publish/win-x86 --self-contained true -p:PublishTrimmed=true -p:PublishSingleFile=true
      - name: Publish application linux-x64
        working-directory: ${{ env.UPDATER_PROJECT_PATH }}
        run: dotnet publish -r linux-x64 --output ./publish/linux-x64 --self-contained true -p:PublishTrimmed=true -p:PublishSingleFile=true
      - name: Publish application osx-x64
        working-directory: ${{ env.UPDATER_PROJECT_PATH }}
        run: dotnet publish -r osx-x64 --output ./publish/osx-x64 --self-contained true -p:PublishTrimmed=true -p:PublishSingleFile=true
      - name: Upload application win-x86
        uses: actions/upload-artifact@v1
        with:
          name: win-application
          path: ${{ env.PUBLISH_WIN_FILE_PATH }}
      - name: Upload application linux-x64
        uses: actions/upload-artifact@v1
        with:
          name: linux-application
          path: ${{ env.PUBLISH_LINUX_FILE_PATH }}
      - name: Upload application osx-x64
        uses: actions/upload-artifact@v1
        with:
          name: osx-application
          path: ${{ env.PUBLISH_OSX_FILE_PATH }}
      - name: Upload updater win-x86
        uses: actions/upload-artifact@v1
        with:
          name: win-updater
          path: ${{ env.PUBLISH_UPDATER_WIN_PATH }}
      - name: Upload updater linux-x64
        uses: actions/upload-artifact@v1
        with:
          name: linux-updater
          path: ${{ env.PUBLISH_UPDATER_LINUX_PATH }}
      - name: Upload updater osx-x64
        uses: actions/upload-artifact@v1
        with:
          name: osx-updater
          path: ${{ env.PUBLISH_UPDATER_OSX_PATH }}
      - run: echo "Finish 'build-publish-dotnet'"
  create-release-and-upload-files:
    name: create-release-and-upload-files
    needs: build-publish-dotnet
    runs-on: ubuntu-latest
    steps:
      - name: Get current date time
        id: current-time
        uses: josStorer/get-current-time@v2
        with:
          format: YYYY.MM.DD HH:mm:ss
          utcOffset: "+02:00"
      - name: Creating release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_VERSION: ${{ github.event.head_commit.message }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: ${{ env.RELEASE_VERSION }}
          body: Release version on ${{ steps.current-time.outputs.formattedTime }}
          draft: false
          prerelease: false
      - name: Download win application
        uses: actions/download-artifact@v1
        with:
          name: win-application
          path: ./win
      - name: Download linux application
        uses: actions/download-artifact@v1
        with:
          name: linux-application
          path: ./linux
      - name: Download osx application
        uses: actions/download-artifact@v1
        with:
          name: osx-application
          path: ./osx
      - name: Download win updater
        uses: actions/download-artifact@v1
        with:
          name: win-updater
          path: ./win
      - name: Download linux updater
        uses: actions/download-artifact@v1
        with:
          name: linux-updater
          path: ./linux
      - name: Download osx updater
        uses: actions/download-artifact@v1
        with:
          name: osx-updater
          path: ./osx
      - name: Upload WIN application Asset
        id: upload-win-application-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }} 
          asset_path: ./win/trade_hero.exe
          asset_name: trade_hero_win.exe
          asset_content_type: application/vnd.microsoft.portable-executable
      - name: Upload LINUX application Asset
        id: upload-linux-application-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }} 
          asset_path: ./linux/trade_hero
          asset_name: trade_hero_linux
          asset_content_type: application/octet-stream
      - name: Upload OSX application Asset
        id: upload-osx-application-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }} 
          asset_path: ./osx/trade_hero
          asset_name: trade_hero_osx
          asset_content_type: application/octet-stream
      - name: Upload WIN updater Asset
        id: upload-win-updater-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }} 
          asset_path: ./win/updater.exe
          asset_name: updater_win.exe
          asset_content_type: application/vnd.microsoft.portable-executable
      - name: Upload LINUX updater Asset
        id: upload-linux-updater-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }} 
          asset_path: ./linux/updater
          asset_name: updater_linux
          asset_content_type: application/octet-stream
      - name: Upload OSX updater Asset
        id: upload-osx-updater-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }} 
          asset_path: ./osx/updater
          asset_name: updater_osx
          asset_content_type: application/octet-stream
      - run: echo "Finish 'create-release-and-upload-files'" 
