name: Application release

on:
  push:
    branches: [ main ]

env:
  APP_PROJECT_PATH: TradeHero/Src/Project/TradeHero.App/
  APP_WIN_PATH: TradeHero/Src/Project/TradeHero.App/publish/win-x86/trade_hero_release.exe
  APP_LINUX_PATH: TradeHero/Src/Project/TradeHero.App/publish/linux-x64/trade_hero_release
  
  LAUNCHER_PROJECT_PATH: TradeHero/Src/TradeHero.Launcher/
  LAUNCHER_WIN_PATH: TradeHero/Src/TradeHero.Launcher/publish/win-x86/launcher_release.exe
  LAUNCHER_LINUX_PATH: TradeHero/Src/TradeHero.Launcher/publish/linux-x64/launcher_release

jobs:

  delete-old-artifacts:
    name: delete-old-artifacts
    runs-on: ubuntu-latest
    steps:
      - name: deleteting-process
        uses: kolpav/purge-artifacts-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          expire-in: 0
      - run: echo "Finish 'delete-old-artifacts'"
      
  build-publish-dotnet:
    name: build-publish-dotnet
    needs: delete-old-artifacts
    runs-on: windows-latest
    steps:
      - name: Checkout to git directory
        uses: actions/checkout@v3
        
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 7.0.x
          
      - name: Restore APP dependencies
        working-directory: ${{ env.APP_PROJECT_PATH }}
        run: dotnet restore
        
      - name: Build APP
        working-directory: ${{ env.APP_PROJECT_PATH }}
        run: dotnet build --configuration Release --no-restore
        
      - name: Publish APP win-x86
        working-directory: ${{ env.APP_PROJECT_PATH }}
        run: dotnet publish -r win-x64 --output ./publish/win-x86 --self-contained true -p:PublishTrimmed=false -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=false
     
      - name: Upload APP win-x86
        uses: actions/upload-artifact@v1
        with:
          name: trade_hero_release.exe
          path: ${{ env.APP_WIN_PATH }}
      
      - name: Publish APP linux-x64
        working-directory: ${{ env.APP_PROJECT_PATH }}
        run: dotnet publish -r linux-x64 --output ./publish/linux-x64 --self-contained true -p:PublishTrimmed=false -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=false
     
      - name: Upload APP linux-x64
        uses: actions/upload-artifact@v1
        with:
          name: trade_hero_release
          path: ${{ env.LAUNCHER_LINUX_PATH }}
     
      - name: Restore LAUNCHER dependencies
        working-directory: ${{ env.LAUNCHER_PROJECT_PATH }}
        run: dotnet restore
      
      - name: Build LAUNCHER
        working-directory: ${{ env.LAUNCHER_PROJECT_PATH }}
        run: dotnet build --configuration Release --no-restore
      
      - name: Publish LAUNCHER win-x86
        working-directory: ${{ env.LAUNCHER_PROJECT_PATH }}
        run: dotnet publish -r win-x64 --output ./publish/win-x86 --self-contained true -p:PublishTrimmed=false -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=false
      
      - name: Upload LAUNCHER win-x86
        uses: actions/upload-artifact@v1
        with:
          name: launcher_release.exe
          path: ${{ env.LAUNCHER_WIN_PATH }}
      
      - name: Publish application linux-x64
        working-directory: ${{ env.LAUNCHER_PROJECT_PATH }}
        run: dotnet publish -r linux-x64 --output ./publish/linux-x64 --self-contained true -p:PublishTrimmed=false -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=false
      
      - name: Upload LAUNCHER linux-x64
        uses: actions/upload-artifact@v1
        with:
          name: launcher_release
          path: ${{ env.LAUNCHER_LINUX_PATH }}
      
      - run: echo "Finish 'build -> publish -> artifact upload'"
      
  create-release-and-upload-files:
    name: create-release-and-upload-files
    needs: build-publish-dotnet
    runs-on: ubuntu-latest
    steps:
    
      - name: Get current date time
        id: current-time
        uses: josStorer/get-current-time@v2
        with:
          format: YYYY.MM.DD HH:mm:ss
          utcOffset: "+02:00"
          
      - name: Creating release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_VERSION: ${{ github.event.head_commit.message }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: ${{ env.RELEASE_VERSION }}
          body: Release version on ${{ steps.current-time.outputs.formattedTime }}
          draft: false
          prerelease: false
          
      - name: Download APP win-x86
        uses: actions/download-artifact@v1
        with:
          name: trade_hero_release.exe
          path: ./win
          
      - name: Download APP linux-x64
        uses: actions/download-artifact@v1
        with:
          name: trade_hero_release
          path: ./linux
          
      - name: Download LAUNCHER win-x86
        uses: actions/download-artifact@v1
        with:
          name: launcher_release.exe
          path: ./win
          
      - name: Download LAUNCHER linux-x64
        uses: actions/download-artifact@v1
        with:
          name: launcher_release
          path: ./linux
          
      - name: Upload APP win-x86 as release asset
        id: upload-app-win-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }} 
          asset_path: ./win/trade_hero_release
          asset_name: trade_hero_release.exe
          asset_content_type: application/vnd.microsoft.portable-executable
          
      - name: Upload APP linux-x64 as release asset
        id: upload-app-linux-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }} 
          asset_path: ./linux/trade_hero_release
          asset_name: trade_hero_release
          asset_content_type: application/octet-stream
          
      - name: Upload LAUNCHER win-x86 as release asset
        id: upload-launcher-win-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }} 
          asset_path: ./win/launcher_release.exe
          asset_name: launcher_release.exe
          asset_content_type: application/vnd.microsoft.portable-executable
          
      - name: Upload LAUNCHER linux-x64 as release asset
        id: upload-launcher-linux-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }} 
          asset_path: ./linux/launcher_release
          asset_name: launcher_release
          asset_content_type: application/octet-stream
          
      - run: echo "Finish 'create-release-and-upload-files'" 
